"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var helpers_1 = require("../helpers");
exports.eslint = {
    validate: function (message) {
        var FIXUP = '(?:fixup!\\s*)?';
        var TAG = '([A-Z][a-z]+)';
        var GH = '(?:(?:[A-Za-z0-9_-]+)\\/(?:[A-Za-z0-9_.-]+))?(?:(?:#|[Gg][Hh]-)\\d+)';
        var MESSAGE = "((?=[A-Z0-9])(?:(?!" + GH + ").)*)";
        var ISSUE = "(\\s\\((?:(?:(?:fixes|refs)\\s" + GH + ")(?:,\\s(?!\\))|\\)))+)?";
        var PATTERN = new RegExp("^" + FIXUP + TAG + ":\\s" + MESSAGE + ISSUE + "$");
        message = message.split('\n').shift();
        var match = PATTERN.exec(message);
        if (!match) {
            helpers_1.log('Message does not match "Tag: Message (fixes #1234)".', 'error');
            helpers_1.log("Given: \"" + message + "\".", 'info');
            return false;
        }
        var matches = match.filter(function (str) { return str ? true : false; }).map(function (str) { return str.trim(); });
        var TAGS = ['Fix', 'Update', 'Breaking', 'Docs', 'Build', 'New', 'Upgrade'];
        if (TAGS.indexOf(matches[1]) === -1) {
            helpers_1.log("The word \"" + matches[1] + "\" is not an allowed tag.", 'error');
            helpers_1.log("Valid types are: " + TAGS.join(', ') + ".", 'info');
            return false;
        }
        return true;
    },
    ignorePattern: /^WIP\:/
};
